use Employee;
--CREATE TABLE: Creates an Employees table with columns for EmployeeID, FirstName, LastName, Department, and Salary.
create table Department(DeptId int Identity(1,1) primary key,DeptName varchar(25));
insert into Department(DeptName) values ('IT');
insert into Department(DeptName) values ('CIVIL');
insert into Department(DeptName) values ('CS');
insert into Department(DeptName) values ('Marketing');
select  * from Department;


create table Employee(EmpId int Identity(1,1), EmpFirstName varchar(25), EmpLastName varchar(25), EmpDeptId int foreign key (EmpDeptId) references Department(DeptId), EmpSalary decimal(10,2));
--INSERT: Adds three employee records to the table.
insert into Employee(EmpFirstName,EmpLastName,EmpDeptId,EmpSalary) values ('Tinu','Clara',1,25000);
insert into Employee(EmpFirstName,EmpLastName,EmpDeptId,EmpSalary) values ('Anu','Clara',1,26000);
insert into Employee(EmpFirstName,EmpLastName,EmpDeptId,EmpSalary) values ('Riya','Clara',1,30000);
insert into Employee(EmpFirstName,EmpLastName,EmpDeptId,EmpSalary) values ('Minu','Maria',2,30000);

--SELECT: Shows different ways to query data:
--Select all columns and rows
select * from Employee;
--Select specific columns
select EmpFirstName,EmpSalary from Employee;
--Select with a WHERE clause to filter results\
select * from Employee where EmpDeptId=2;

--What is the purpose of the IDENTITY keyword in the CREATE TABLE statement?
--creates an auto-incrementing numeric column that automatically generates a unique value for each new row.
--Format Identity(a,b) -a specifies from which number to start and b represents by how much it should be incremented.

--Write a SELECT statement to retrieve only the FirstName and Salary of all employees.
select EmpFirstName,EmpSalary from Employee;

--How would you modify the existing UPDATE statement to give all employees in the IT department a 10% raise
Update Employee set EmpSalary=EmpSalary*1.1 where EmpDeptId=1;

--Write a SELECT statement to find the highest salary in the Employees table.
SELECT TOP 1 * FROM Employee ORDER BY EmpSalary DESC;

--How would you add a new column named "HireDate" of type DATE to the Employees table?
alter table Employee add  HireDate DATE;

--Write an INSERT statement to add a new employee named "Sarah Brown" in the "Marketing" department with a salary of 72000.00.
insert into Employee(EmpFirstName,EmpLastName,EmpDeptId,EmpSalary) values ('Sarah','Brown',4,-72000.00);

--How would you modify the table to ensure that the Salary column cannot contain negative values?
alter table Employee add constraint Sal_Negative_Check CHECK(EmpSalary>= 0);

--How would you add a UNIQUE constraint to the Employees table to ensure that no two employees can have the same email address
alter table Employee add  Email1 varchar(50);
Update Employee set Email1= 'tinu@gmail.com' where EmpFirstName='Tinu';
Update Employee set Email1= 'anu@gmail.com' where EmpFirstName='Anu';
Update Employee set Email1= 'riya@gmail.com' where EmpFirstName='Riya';
Update Employee set Email1= 'minu@gmail.com' where EmpFirstName='Minu';
Update Employee set Email1= 'Sarah@gmail.com' where EmpFirstName='Minu';
ALTER TABLE Employee ADD UNIQUE (Email1);

--Write an ALTER TABLE statement to add an "Email" column to the Employees table with a UNIQUE constraint that allows NULL values
ALTER TABLE Employee ADD Email VARCHAR(50) NULL;
CREATE UNIQUE INDEX UQ_Employee_Email_NonNULLON Employee (Email) WHERE Email IS NOT NULL;